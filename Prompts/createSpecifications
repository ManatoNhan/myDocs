# 分野別対応仕様書作成メタプロンプト

## 使用前チェックリスト

以下の項目を確認してから適切なプロンプトを選択してください：

- [ ] 仕様書の対象（機能、API、システム、データ等）は何か？
- [ ] 読者層（開発者、テスター、運用者等）は誰か？
- [ ] 技術レベル（基本設計、詳細設計）はどこまでか？
- [ ] AI/ML要素やCS関連機能は含まれるか？

---

## 簡易版メタプロンプト

```
あなたは経験豊富なシステム設計者です。以下の情報を基に、実装可能な仕様書を作成してください。

【仕様書種別を選択】
A. 一般的なシステム仕様（機能・画面・API等）
B. AI/ML系仕様（モデル・データパイプライン等）
C. CS Ops系仕様（顧客接点・自動化等）
D. 複合型（複数要素を含む）

【入力情報】
- 対象システム/機能：[仕様化対象の詳細]
- 想定読者：[開発者/テスター/運用者等]
- 技術レベル：[基本設計/詳細設計]
- 既存システム情報：[連携先、制約等]
- 選択した種別：[A/B/C/D]

【共通出力フォーマット】
1. **概要**
   - 目的・対象範囲・前提条件

2. **システム構成**
   - アーキテクチャ概要・コンポーネント構成

3. **機能仕様**
   - 機能一覧・詳細仕様・入出力定義

4. **インターフェース仕様**
   - API・データ連携・外部システム接続

5. **データ仕様**
   - データ構造・フォーマット・制約条件

6. **非機能仕様**
   - 性能・セキュリティ・運用要件

7. **テスト仕様**
   - テスト観点・テストケース・検証方法

【種別別追加項目】

■ Bを選択した場合（AI/ML系）：
- **データスキーマ**：学習・推論データの形式・品質基準
- **モデル仕様**：アルゴリズム・ハイパーパラメータ・評価指標
- **パイプライン仕様**：前処理・学習・推論フローの詳細
- **実験設定**：A/Bテスト・モデル比較・性能測定方法

■ Cを選択した場合（CS Ops系）：
- **顧客データスキーマ**：顧客情報・行動データ・セグメント定義
- **自動化ルール**：トリガー条件・アクション・エスカレーション
- **コミュニケーション仕様**：テンプレート・パーソナライゼーション
- **分析・レポート仕様**：KPI算出・ダッシュボード・アラート

■ Dを選択した場合（複合型）：
- 上記B・Cの該当項目を組み合わせて記載

各項目は実装者が理解しやすい具体的な内容で記載し、サンプルコードや図表を積極的に活用してください。
```

---

## 詳細版メタプロンプト

```
あなたは上級システムアーキテクト兼テクニカルライターです。以下のガイドラインに従って、実装・テスト・運用に必要な詳細仕様書を作成してください。

【仕様書種別を選択】
A. 一般的なシステム仕様（機能・画面・API等）
B. AI/ML系仕様（モデル・データパイプライン等）
C. CS Ops系仕様（顧客接点・自動化等）
D. 複合型（複数要素を含む）

【前提条件】
- 実装者が迷わずに開発できる詳細度で記述する
- テストケースが作成できる具体性を保つ
- 運用・保守に必要な情報を含める
- 技術的根拠と設計判断理由を明記する

【入力情報】
- 対象システム/機能：[仕様化対象の詳細]
- 技術スタック：[使用言語、フレームワーク、DB等]
- 想定読者：[開発者/テスター/運用者等のスキルレベル]
- 既存システム情報：[連携先、制約、移行要件等]
- 品質要件：[性能、信頼性、セキュリティ基準]
- 選択した種別：[A/B/C/D]

【共通出力フォーマット】

## 1. 概要
### 1.1 目的・背景
- 仕様書の目的
- 対象システム/機能の概要
- 想定読者とスキルレベル

### 1.2 対象範囲
- 仕様化対象の詳細範囲
- 対象外項目の明確化
- 関連ドキュメントの参照関係

### 1.3 前提条件・制約
- 技術的前提条件
- 環境・リソース制約
- 時間的制約

## 2. システム構成
### 2.1 全体アーキテクチャ
- システム構成図
- コンポーネント間の関係
- デプロイメント構成

### 2.2 技術スタック
- 使用技術・フレームワーク
- バージョン情報
- 選定理由

### 2.3 環境構成
- 開発・ステージング・本番環境
- インフラ構成
- 監視・ログ設定

## 3. 機能仕様
### 3.1 機能一覧
- 機能ID、機能名、優先度
- 機能間の依存関係
- ユーザーストーリー

### 3.2 詳細機能仕様
- 入力・出力・処理フロー
- ビジネスルール・検証ロジック
- エラーハンドリング・例外処理

### 3.3 画面仕様（該当する場合）
- 画面レイアウト・UI要素
- 画面遷移・操作フロー
- バリデーション・メッセージ

## 4. インターフェース仕様
### 4.1 API仕様
- エンドポイント・HTTPメソッド
- リクエスト・レスポンス形式
- 認証・認可方式
- エラーコード・メッセージ

### 4.2 データベース連携
- テーブル設計・ER図
- SQL文・ストアドプロシージャ
- トランザクション制御

### 4.3 外部システム連携
- 連携方式・プロトコル
- データフォーマット・変換ルール
- 障害時の動作・リトライ制御

## 5. データ仕様
### 5.1 データモデル
- エンティティ関係図
- 属性定義・制約条件
- 正規化レベル・最適化方針

### 5.2 データフォーマット
- 入力・出力データ形式
- バリデーションルール
- 文字コード・エンコーディング

### 5.3 データライフサイクル
- データ生成・更新・削除
- アーカイブ・パージ方針
- バックアップ・復旧手順

## 6. 非機能仕様
### 6.1 性能要件
- レスポンス時間・スループット
- 同時接続数・負荷分散
- キャッシュ戦略・最適化

### 6.2 可用性・信頼性
- 稼働率目標・障害許容度
- 冗長化・フェイルオーバー
- ヘルスチェック・監視

### 6.3 セキュリティ仕様
- 認証・認可メカニズム
- 暗号化・ハッシュ化
- 脆弱性対策・セキュリティテスト

### 6.4 運用・保守性
- ログ出力・監視項目
- 設定管理・デプロイ手順
- トラブルシューティング

## 7. テスト仕様
### 7.1 テスト戦略
- テストレベル・テスト種別
- テスト環境・テストデータ
- 自動化方針・ツール選定

### 7.2 テストケース設計
- 正常系・異常系テストケース
- 境界値・同値分割
- 性能・セキュリティテスト

### 7.3 検証・承認基準
- 品質ゲート・完了基準
- 承認プロセス・責任者
- 欠陥管理・修正方針

## 8. 実装ガイドライン
### 8.1 コーディング規約
- 命名規則・コードスタイル
- コメント・ドキュメント
- レビュー基準・チェックリスト

### 8.2 開発手順
- 開発フロー・ブランチ戦略
- ビルド・デプロイ手順
- 品質管理・CI/CD

### 8.3 トラブルシューティング
- よくある問題・対処法
- デバッグ手順・ツール
- エスカレーション基準

【種別別専門追加項目】

■ Bを選択した場合（AI/ML系）：

## 9. データ・モデル専門仕様
### 9.1 データパイプライン仕様
- **データソース**：取得元、更新頻度、品質基準
- **前処理**：クリーニング、変換、特徴量エンジニアリング
- **パイプライン制御**：バッチ・ストリーム処理、エラーハンドリング

### 9.2 モデル仕様
- **アルゴリズム**：選定理由、ハイパーパラメータ
- **学習仕様**：データ分割、交差検証、早期終了
- **評価指標**：精度、再現率、F1スコア、AUC等

### 9.3 推論・サービング仕様
- **推論API**：入力形式、出力形式、レスポンス時間
- **バッチ推論**：処理単位、スケジュール、結果格納
- **リアルタイム推論**：ストリーミング、レイテンシ要件

### 9.4 実験・検証仕様
- **A/Bテスト**：実験設計、統計的有意性、判定基準
- **モデル比較**：ベースライン、比較指標、選定基準
- **モニタリング**：データドリフト、性能劣化検知

### 9.5 MLOps仕様
- **バージョン管理**：データ、モデル、実験の管理
- **CI/CD**：自動テスト、デプロイ、ロールバック
- **監査・ガバナンス**：実験履歴、意思決定記録

■ Cを選択した場合（CS Ops系）：

## 9. 顧客成功専門仕様
### 9.1 顧客データ管理仕様
- **データ統合**：CRM、サポート、利用データの統合方式
- **顧客プロファイル**：属性、行動データ、セグメント分類
- **データ品質**：重複排除、正規化、更新頻度

### 9.2 自動化・ワークフロー仕様
- **トリガー設定**：条件、優先度、実行タイミング
- **アクション定義**：メール、通知、タスク生成
- **エスカレーション**：条件、階層、担当者割り当て

### 9.3 コミュニケーション仕様
- **テンプレート管理**：作成、承認、バージョン管理
- **パーソナライゼーション**：変数、条件分岐、A/Bテスト
- **配信制御**：頻度制限、オプトアウト、配信時間

### 9.4 分析・レポート仕様
- **KPI算出**：計算式、更新頻度、データソース
- **ダッシュボード**：レイアウト、権限、リアルタイム性
- **アラート設定**：閾値、通知先、エスカレーション

### 9.5 顧客体験仕様
- **オンボーディング**：ステップ、コンテンツ、完了基準
- **ヘルススコア**：算出ロジック、重み付け、更新頻度
- **解約予防**：予測モデル、介入施策、効果測定

■ Dを選択した場合（複合型）：
- 上記B・Cの該当項目を組み合わせて記載
- データフロー全体の整合性を確保
- 各コンポーネント間のインターフェース詳細化

【記載上の注意点】
- 実装レベルまで落とし込んだ具体的な記述
- サンプルコード・SQL文・設定例を積極的に記載
- 図表・フローチャート・シーケンス図を活用
- エラーケース・例外処理を漏れなく記載
- 選択した種別に応じた技術標準・ベストプラクティスを反映
- 実装者のスキルレベルに応じた説明レベルを調整
```

---

## 使用ガイドライン

### 種別選択の判断基準

| 種別 | 選択基準 | 主な対象仕様 |
|------|----------|-------------|
| **A. 一般的** | システム機能・画面・API仕様 | Web機能、業務ロジック、データベース、API |
| **B. AI/ML系** | データ・モデル・MLOps仕様 | 機械学習モデル、データパイプライン、推論API |
| **C. CS Ops系** | 顧客接点・自動化仕様 | CRM機能、マーケティングオートメーション、分析 |
| **D. 複合型** | 複数要素を含む統合仕様 | AI搭載システム、データドリブンCS、統合プラットフォーム |

### 効果的な使用方法

1. **要件定義書との連携**：要件定義書の内容を引き継いで詳細化
2. **段階的詳細化**：基本設計→詳細設計の順で作成
3. **レビュー重視**：ステークホルダーとの定期的な仕様確認
4. **実装者視点**：実際の開発・テストで使える具体性を重視

### 仕様書品質向上のポイント

- **具体性**：実装可能なレベルまで詳細化
- **完全性**：エラーケース・例外処理まで網羅
- **一貫性**：用語・記法の統一
- **可読性**：図表・サンプルコードの積極活用
- **保守性**：変更履歴・更新理由の記録
